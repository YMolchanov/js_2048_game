{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * It includes full logic for 2048 gameplay.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState\n   */ constructor(initialState){\n        this.size = 4;\n        this.score = 0;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n        this.board = initialState || this.createEmptyBoard();\n    }\n    /**\n   * Creates an empty 4x4 board.\n   * @returns {number[][]}\n   */ createEmptyBoard() {\n        return Array.from({\n            length: this.size\n        }, ()=>Array(this.size).fill(0));\n    }\n    /**\n   * Returns current board state.\n   * @returns {number[][]}\n   */ getState() {\n        return this.board;\n    }\n    /**\n   * Returns current score.\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * Returns current game status.\n   * @returns {'idle' | 'playing' | 'win' | 'lose'}\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.start();\n    }\n    /**\n   * Adds a random tile (2 or 4) to an empty cell.\n   */ addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < this.size; row++){\n            for(let col = 0; col < this.size; col++)if (this.board[row][col] === 0) emptyCells.push([\n                row,\n                col\n            ]);\n        }\n        if (emptyCells.length === 0) return;\n        const [randRow, randCol] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[randRow][randCol] = Math.random() < 0.1 ? 4 : 2;\n    }\n    /**\n   * Moves tiles left.\n   * @returns {boolean}\n   */ moveLeft() {\n        return this.move(\"left\");\n    }\n    /**\n   * Moves tiles right.\n   * @returns {boolean}\n   */ moveRight() {\n        return this.move(\"right\");\n    }\n    /**\n   * Moves tiles up.\n   * @returns {boolean}\n   */ moveUp() {\n        return this.move(\"up\");\n    }\n    /**\n   * Moves tiles down.\n   * @returns {boolean}\n   */ moveDown() {\n        return this.move(\"down\");\n    }\n    /**\n   * General move handler.\n   * @param {'left' | 'right' | 'up' | 'down'} direction\n   * @returns {boolean}\n   */ move(direction) {\n        if (this.status !== \"playing\") return false;\n        const original = JSON.stringify(this.board);\n        let board = [\n            ...this.board\n        ];\n        const rotate = (matrix)=>matrix[0].map((_, i)=>matrix.map((row)=>row[i]));\n        const reverse = (matrix)=>matrix.map((row)=>row.reverse());\n        if (direction === \"up\") board = rotate(board);\n        if (direction === \"down\") board = reverse(rotate(board));\n        if (direction === \"right\") board = reverse(board);\n        board = board.map((row)=>this.mergeRow(row));\n        if (direction === \"up\") board = rotate(board);\n        if (direction === \"down\") board = rotate(reverse(board));\n        if (direction === \"right\") board = reverse(board);\n        const moved = JSON.stringify(board) !== original;\n        if (moved) {\n            this.board = board;\n            this.addRandomTile();\n            if (!this.canMove()) this.status = \"lose\";\n        }\n        return moved;\n    }\n    /**\n   * Merges a single row according to 2048 rules.\n   * @param {number[]} row\n   * @returns {number[]}\n   */ mergeRow(row) {\n        const filtered = row.filter((val)=>val !== 0);\n        const merged = [];\n        let i = 0;\n        while(i < filtered.length)if (filtered[i] === filtered[i + 1]) {\n            const newVal = filtered[i] * 2;\n            merged.push(newVal);\n            this.score += newVal;\n            if (newVal === 2048) this.status = \"win\";\n            i += 2;\n        } else {\n            merged.push(filtered[i]);\n            i++;\n        }\n        while(merged.length < this.size)merged.push(0);\n        return merged;\n    }\n    /**\n   * Checks if any moves are possible.\n   * @returns {boolean}\n   */ canMove() {\n        for(let row = 0; row < this.size; row++)for(let col = 0; col < this.size; col++){\n            const val = this.board[row][col];\n            if (val === 0) return true;\n            if (row < this.size - 1 && val === this.board[row + 1][col]) return true;\n            if (col < this.size - 1 && val === this.board[row][col + 1]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$scoreEl = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$startMsg = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$winMsg = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMsg = document.querySelector(\".message-lose\");\nfunction $09e991522ca7e64e$var$updateUI() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    $09e991522ca7e64e$var$cells.forEach((cell, i)=>{\n        const val = state[Math.floor(i / 4)][i % 4];\n        cell.textContent = val === 0 ? \"\" : val;\n        cell.className = \"field-cell\";\n        if (val) cell.classList.add(`field-cell--${val}`);\n    });\n    $09e991522ca7e64e$var$scoreEl.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$winMsg.classList.toggle(\"hidden\", $09e991522ca7e64e$var$game.getStatus() !== \"won\");\n    $09e991522ca7e64e$var$loseMsg.classList.toggle(\"hidden\", $09e991522ca7e64e$var$game.getStatus() !== \"lose\");\n}\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$updateUI();\n    $09e991522ca7e64e$var$startMsg.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startBtn.textContent = \"Restart\";\n    $09e991522ca7e64e$var$startBtn.classList.remove(\"start\");\n    $09e991522ca7e64e$var$startBtn.classList.add(\"restart\");\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    let moved = false;\n    if (e.key === \"ArrowLeft\") moved = $09e991522ca7e64e$var$game.moveLeft();\n    if (e.key === \"ArrowRight\") moved = $09e991522ca7e64e$var$game.moveRight();\n    if (e.key === \"ArrowUp\") moved = $09e991522ca7e64e$var$game.moveUp();\n    if (e.key === \"ArrowDown\") moved = $09e991522ca7e64e$var$game.moveDown();\n    if (moved) $09e991522ca7e64e$var$updateUI();\n});\n\n\n//# sourceMappingURL=index.71a02c65.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\n// Write your code here\nconst Game = require('../modules/Game.class');\n\nconst game = new Game();\nconst cells = document.querySelectorAll('.field-cell');\nconst scoreEl = document.querySelector('.game-score');\nconst startBtn = document.querySelector('.button');\nconst startMsg = document.querySelector('.message-start');\nconst winMsg = document.querySelector('.message-win');\nconst loseMsg = document.querySelector('.message-lose');\n\nfunction updateUI() {\n  const state = game.getState();\n\n  cells.forEach((cell, i) => {\n    const val = state[Math.floor(i / 4)][i % 4];\n\n    cell.textContent = val === 0 ? '' : val;\n    cell.className = 'field-cell';\n\n    if (val) {\n      cell.classList.add(`field-cell--${val}`);\n    }\n  });\n\n  scoreEl.textContent = game.getScore();\n  winMsg.classList.toggle('hidden', game.getStatus() !== 'won');\n  loseMsg.classList.toggle('hidden', game.getStatus() !== 'lose');\n}\n\nstartBtn.addEventListener('click', () => {\n  game.start();\n  updateUI();\n  startMsg.classList.add('hidden');\n  startBtn.textContent = 'Restart';\n  startBtn.classList.remove('start');\n  startBtn.classList.add('restart');\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  let moved = false;\n\n  if (e.key === 'ArrowLeft') {\n    moved = game.moveLeft();\n  }\n\n  if (e.key === 'ArrowRight') {\n    moved = game.moveRight();\n  }\n\n  if (e.key === 'ArrowUp') {\n    moved = game.moveUp();\n  }\n\n  if (e.key === 'ArrowDown') {\n    moved = game.moveDown();\n  }\n\n  if (moved) {\n    updateUI();\n  }\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * It includes full logic for 2048 gameplay.\n */\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState\n   */\n  constructor(initialState) {\n    this.size = 4;\n    this.score = 0;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n    this.board = initialState || this.createEmptyBoard();\n  }\n\n  /**\n   * Creates an empty 4x4 board.\n   * @returns {number[][]}\n   */\n  createEmptyBoard() {\n    return Array.from({ length: this.size }, () => Array(this.size).fill(0));\n  }\n\n  /**\n   * Returns current board state.\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns current score.\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns current game status.\n   * @returns {'idle' | 'playing' | 'win' | 'lose'}\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  /**\n   * Adds a random tile (2 or 4) to an empty cell.\n   */\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const [randRow, randCol] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[randRow][randCol] = Math.random() < 0.1 ? 4 : 2;\n  }\n\n  /**\n   * Moves tiles left.\n   * @returns {boolean}\n   */\n  moveLeft() {\n    return this.move('left');\n  }\n\n  /**\n   * Moves tiles right.\n   * @returns {boolean}\n   */\n  moveRight() {\n    return this.move('right');\n  }\n\n  /**\n   * Moves tiles up.\n   * @returns {boolean}\n   */\n  moveUp() {\n    return this.move('up');\n  }\n\n  /**\n   * Moves tiles down.\n   * @returns {boolean}\n   */\n  moveDown() {\n    return this.move('down');\n  }\n\n  /**\n   * General move handler.\n   * @param {'left' | 'right' | 'up' | 'down'} direction\n   * @returns {boolean}\n   */\n  move(direction) {\n    if (this.status !== 'playing') {\n      return false;\n    }\n\n    const original = JSON.stringify(this.board);\n    let board = [...this.board];\n\n    const rotate = (matrix) =>\n      matrix[0].map((_, i) => matrix.map((row) => row[i]));\n    const reverse = (matrix) => matrix.map((row) => row.reverse());\n\n    if (direction === 'up') {\n      board = rotate(board);\n    }\n\n    if (direction === 'down') {\n      board = reverse(rotate(board));\n    }\n\n    if (direction === 'right') {\n      board = reverse(board);\n    }\n\n    board = board.map((row) => this.mergeRow(row));\n\n    if (direction === 'up') {\n      board = rotate(board);\n    }\n\n    if (direction === 'down') {\n      board = rotate(reverse(board));\n    }\n\n    if (direction === 'right') {\n      board = reverse(board);\n    }\n\n    const moved = JSON.stringify(board) !== original;\n\n    if (moved) {\n      this.board = board;\n      this.addRandomTile();\n\n      if (!this.canMove()) {\n        this.status = 'lose';\n      }\n    }\n\n    return moved;\n  }\n\n  /**\n   * Merges a single row according to 2048 rules.\n   * @param {number[]} row\n   * @returns {number[]}\n   */\n  mergeRow(row) {\n    const filtered = row.filter((val) => val !== 0);\n    const merged = [];\n    let i = 0;\n\n    while (i < filtered.length) {\n      if (filtered[i] === filtered[i + 1]) {\n        const newVal = filtered[i] * 2;\n\n        merged.push(newVal);\n        this.score += newVal;\n\n        if (newVal === 2048) {\n          this.status = 'win';\n        }\n        i += 2;\n      } else {\n        merged.push(filtered[i]);\n        i++;\n      }\n    }\n\n    while (merged.length < this.size) {\n      merged.push(0);\n    }\n\n    return merged;\n  }\n\n  /**\n   * Checks if any moves are possible.\n   * @returns {boolean}\n   */\n  canMove() {\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        const val = this.board[row][col];\n\n        if (val === 0) {\n          return true;\n        }\n\n        if (row < this.size - 1 && val === this.board[row + 1][col]) {\n          return true;\n        }\n\n        if (col < this.size - 1 && val === this.board[row][col + 1]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","size","score","status","board","createEmptyBoard","Array","from","length","fill","getState","getScore","getStatus","start","addRandomTile","restart","emptyCells","row","col","push","randRow","randCol","Math","floor","random","moveLeft","move","moveRight","moveUp","moveDown","direction","original","JSON","stringify","rotate","matrix","map","_","i","reverse","mergeRow","moved","canMove","filtered","filter","val","merged","newVal","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$scoreEl","querySelector","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$startMsg","$09e991522ca7e64e$var$winMsg","$09e991522ca7e64e$var$loseMsg","$09e991522ca7e64e$var$updateUI","state","forEach","cell","textContent","className","classList","add","toggle","addEventListener","remove","e","key"],"version":3,"file":"index.71a02c65.js.map"}